// This file is generated by Ember Desktop.  Please do not edit manually.
//
//

// This file contains the tokens for attributes stored in flash


// Identifier tags for tokens
// Creator for attribute: on/off, endpoint: 1
#define CREATOR_ON_OFF_1 0xB000
// Creator for attribute: current level, endpoint: 1
#define CREATOR_CURRENT_LEVEL_1 0xB001
// Creator for attribute: on level, endpoint: 1
#define CREATOR_ON_LEVEL_1 0xB002
// Creator for attribute: color temperature, endpoint: 1
#define CREATOR_COLOR_CONTROL_COLOR_TEMPERATURE_1 0xB003
// Creator for attribute: current summation delivered, endpoint: 1
#define CREATOR_CURRENT_SUMMATION_DELIVERED_1 0xB004
// Creator for attribute: auto reset, endpoint: 1
#define CREATOR_AUTO_RESET_1 0xB005


// Types for the tokens
#ifdef DEFINETYPES
typedef int8u  tokType_on_off;
typedef int8u  tokType_on_level;
typedef int8u  tokType_current_level;
typedef int16u  tokType_color_control_color_temperature;
typedef int8u  tokType_current_summation_delivered[6];
typedef int8u  tokType_auto_reset;
#endif // DEFINETYPES


// Actual token definitions
#ifdef DEFINETOKENS
DEFINE_BASIC_TOKEN(ON_OFF_1, tokType_on_off, 0x01)
DEFINE_BASIC_TOKEN(CURRENT_LEVEL_1, tokType_current_level, 0xff)
DEFINE_BASIC_TOKEN(ON_LEVEL_1, tokType_on_level, 0xff)
DEFINE_BASIC_TOKEN(COLOR_CONTROL_COLOR_TEMPERATURE_1, tokType_color_control_color_temperature, 0x0172)
DEFINE_BASIC_TOKEN(CURRENT_SUMMATION_DELIVERED_1, tokType_current_summation_delivered, {0x00, 0x00, 0x00, 0x00, 0x00, 0x01})
DEFINE_BASIC_TOKEN(AUTO_RESET_1, tokType_auto_reset, 0x00)
#endif // DEFINETOKENS


// Macro snippet that loads all the attributes from tokens
#define GENERATED_TOKEN_LOADER(endpoint) do {\
  int8u ptr[6]; \
  int8u curNetwork = emberGetCurrentNetwork(); \
  int8u epNetwork; \
  epNetwork = emberAfNetworkIndexFromEndpoint(1); \
  if((endpoint) == 1 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_on_off *)ptr, TOKEN_ON_OFF_1); \
    emberAfWriteServerAttribute(1, ZCL_ON_OFF_CLUSTER_ID, ZCL_ON_OFF_ATTRIBUTE_ID, (int8u*)ptr, ZCL_BOOLEAN_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_current_level *)ptr, TOKEN_CURRENT_LEVEL_1); \
    emberAfWriteServerAttribute(1, ZCL_LEVEL_CONTROL_CLUSTER_ID, ZCL_CURRENT_LEVEL_ATTRIBUTE_ID, (int8u*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_on_level *)ptr, TOKEN_ON_LEVEL_1); \
    emberAfWriteServerAttribute(1, ZCL_LEVEL_CONTROL_CLUSTER_ID, ZCL_ON_LEVEL_ATTRIBUTE_ID, (int8u*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_color_control_color_temperature *)ptr, TOKEN_COLOR_CONTROL_COLOR_TEMPERATURE_1); \
    emberAfWriteServerAttribute(1, ZCL_COLOR_CONTROL_CLUSTER_ID, ZCL_COLOR_CONTROL_COLOR_TEMPERATURE_ATTRIBUTE_ID, (int8u*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_current_summation_delivered *)ptr, TOKEN_CURRENT_SUMMATION_DELIVERED_1); \
    emberAfWriteServerAttribute(1, ZCL_SIMPLE_METERING_CLUSTER_ID, ZCL_CURRENT_SUMMATION_DELIVERED_ATTRIBUTE_ID, (int8u*)ptr, ZCL_INT48U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_auto_reset *)ptr, TOKEN_AUTO_RESET_1); \
    emberAfWriteManufacturerSpecificServerAttribute(1, ZCL_AUTO_RESET_CLUSTER_ID, ZCL_AUTO_RESET_ATTRIBUTE_ID, 0x1160, (int8u*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  } \
} while(FALSE)


// Macro snippet that saves the attribute to token
#define GENERATED_TOKEN_SAVER do {\
  int8u allZeroData[6]; \
  MEMSET(allZeroData, 0, 6); \
  if ( data == NULL ) data = allZeroData; \
  if ( endpoint == 1 ) { \
    if ( clusterId == 0x06 ) { \
      if ( metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ON_OFF_1, data); \
    } else if ( clusterId == 0x08 ) { \
      if ( metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_CURRENT_LEVEL_1, data); \
      if ( metadata->attributeId == 0x0011 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ON_LEVEL_1, data); \
    } else if ( clusterId == 0x0300 ) { \
      if ( metadata->attributeId == 0x0007 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_COLOR_CONTROL_COLOR_TEMPERATURE_1, data); \
    } else if ( clusterId == 0x0702 ) { \
      if ( metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_CURRENT_SUMMATION_DELIVERED_1, data); \
    } else if ( clusterId == 0xFC04 ) { \
      if ( metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_AUTO_RESET_1, data); \
    } \
  } \
} while(FALSE)


